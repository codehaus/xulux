<?xml version="1.0"?>
<document>

  <properties>
    <title>XULUX - GuiLayers - Widgets - Tree </title>
    <author email="martin@mvdb.net">Martin van den Bemt</author>
  </properties>

<body>

<section name="The Tree Widget">
  <subsection name="General">
    <p>
      Currently the widget only supports a single node selection. Investigation is on the way
      on how to handle mutliple selections.
      To execute code when a new node is selected you can add a rule to the tree widget,
      overriding the <a href="../../apidocs/org/xulux/nyx/rules/Rule.html#execute(org.xulux.core.PartRequest)">
      <code>execute(org.xulux.core.PartRequest request)</code></a>.
    </p>
  </subsection>
  <subsection name="Properties">
    <p>
      This is a list of all supported, Tree specific, properties,
      or standard properties that behave a certain way, which isn't default.
      See the <a href="index.html">widget page</a> for information
      about properties used for all widgets.
    </p>
    <table>
      <tr><th>Property</th><th>supported</th><th>Behaviour</th></tr>
      <tr>
        <td>linestyle</td>
        <td>swing (Only Metal L&amp;F!!)</td>
        <td>Possible values are None, Horizontal or Angled. Defaults to none<br/>
            NOTE: These properties are case sensitive!</td>
      </tr>
      <tr>
        <td>expand</td>
        <td>swing</td>
        <td>
          Expands the complete tree 
        </td>
      </tr>
      <tr>
        <td>expand-untill</td>
        <td>swing</td>
        <td>
          Expand the tree untill an insetnace of the specified object is encountered.
          The content of the parameter should be the full qualified classname.
          If you specify leaf as the value, it will expand untill the leaf 
          (meaning NOT including the leafs)
          If it is null, it just expands using the gui layer defaults.
        </td>
      </tr>
      <tr>
        <td>collapse</td>
        <td>swing</td>
        <td>
          Collapses the tree to the root object.
        </td>
      </tr>
      <tr>
        <td>collapse-untill</td>
        <td>swing</td>
        <td>
          If the value is level# (# = number) it will collapse till the specified
          level.
        </td>
      </tr>
      <tr>
        <td>showicons</td>
        <td>swing</td>
        <td>
          true or false. Defaults to true.
        </td>
      </tr>
      <tr>
        <td>treefield</td>
        <td>swing</td>
        <td>
          Specify if you want to use a treefield or not. The attributes you can are treefield.class and
          treefield.use. This allows for showing different content in the tree than just the toString version.
        </td>
      </tr>
      <tr>
        <td>treefield.class</td>
        <td>swing</td>
        <td>
          Specifiy the class that the treefield must map to. 
        </td>
      </tr>
      <tr>
        <td>treefield.use</td>
        <td>swing</td>
        <td>
          The field on the specified class that must be used.
        </td>
      </tr>
      <tr>
        <td>contentview</td>
        <td>swing</td>
        <td>
          The contentview is there to modify the text that a user sees in the tree.
          This will override the default used in the system and can be changed all the time.
        </td>
      </tr>
      <tr>
        <td>showroot</td>
        <td>swing</td>
        <td>
          Specify it you want the root of the tree shown or not. Defaults to true.
        </td>
      </tr>
    </table>
  </subsection>
</section>

</body>

</document>
